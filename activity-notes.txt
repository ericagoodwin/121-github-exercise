D1. What does git help do?

git help lists common commands and how to use them.

D2. What does -ag cause git help to do?

The -ag option lists all available commands.




E1. What are these commands doing?

Configure git so that you make commits from the given username and email. Useful for navigating between different accounts.

E2. What is the purpose of --global?

—-global makes is so that whichever repository you’re in, you’re using the given username and email to make commits.



F1. By default any file that starts with . is hidden. How do you display a hidden file?

Show a hidden file with the command ls -a.

F2. Run this command to show the hidden files in the current directory. Are there any?

There are two hidden files called “.” and “..”

F3. Now run the following command. F4. Check for hidden files again. What was created by git init?

git init created .git.

F5. What do you think would happen if you delete .git?

.git makes the repository ready to interact with GitHub, but it .git was deleted, that wouldn’t be the case and you’d have to run git init again.

F6. Using your observations to the previous questions, answer the following. You find an old project on your hard drive. You do not remember if it is a under version control. What could you look for to determine if the project is being managed using git?

Look for a .git in the repository.



G1. What kind of information does git status report?

After editing the file - file highlighted as changed and uncommitted
After committing - file highlighted as changed and committed
After git log - showed there was no new changes

In summary, git status shows the commit status of changed files.

G2. What does git add names.txt do?

git add staged names.txt for commit.

G3. What does git commit -m "Add our names." do?

git commit -m committed names.txt with the message “Add our names.”

G4. What does git add . do? What do you think . means?

git add . stages all changed files for commit.

G5. What does git commit (without -m) do?

git commit without -m Opens the vim editor so you can write a multiline comment.

G6. If you want to write a more detailed commit message (which is good practice) what command would you use?

git commit

G7. What does git log do?

git log shows all the commits that have been made from newest to oldest.



H1. Below write each file name under the state that its changes are currently in. Compose a definition for each state.

Staged - ready to be committed

Unstaged - not ready to be committed, git add <file> needs to be run

Untracked - hasn’t been added to the files for commit, git add <file> needs to be run

H2. If you run git commit what changes will be committed (don't do it)?

git commit will commit only the files staged for commit.

H3. What command do you run to stage changes?

git add

H4. What command do you run to unstage changes?

git reset

H1. What does git diff display?

git diff shows changes

H2.What does git diff --cached display?

git diff —cached shows changes in the file(s) staged for commit.

H3. Formulate a sequence of commands to unstage changes to names.txt, and stage the changes to movies.txt. Execute your commands and confirm they worked.

git reset — names.txt
git add movies.txt

H4. Edit movies.txt, change any one of the movies, and save it. Then run git status. What do you observe? Explain what you think is going on.

The old changes are staged, but never got committed, so now there are staged and unstaged changes.

H5. Delete names.txt. Then run git status. What do you observe? Explain what you think is going on.

It lists the deletion as an unstaged change, which makes sense because the file has been changed (it’s been deleted).

H6. Rename movies.txt to last-movies. Run git status. Observe and explain.

It acts as if movies.txt was deleted and the renamed version is untracked.

H7. Formulate a sequence of commands to stage all changes including the untracked file and commit (with any reasonable message you like). Execute them.

git add .
git commit -m “committing all files”

H8. In git vernacular, index, cache, and stage all refer to the same thing. What does it hold?

It holds the files staged for commit.

H9. Why have a stage? Why not just commit all changes since the last commit?

You may not want to commit a change you’re not sure about yet, but would like to commit other changes.



Run the following commands:

git log
git status
git reset --soft "HEAD^"
git log
git status

I1. What does git reset --soft ``"HEAD^"do?

git reset --soft ``"HEAD^" undoes the last commit.

Run the following commands:

git commit –m "Redo."
git log
git status
git reset --hard "HEAD^"
git log
git status

I1. What does git reset --hard ``"HEAD^"``do?

git reset --soft ``"HEAD^" undoes the last commit and moved the head to the new latest commit.

I2. What is the difference between --hard and --soft?

With —-soft you can run git commit –m "Redo" and the undid commit returns. That can’t be done with —hard.

I3. What do you think HEAD means?

HEAD is the latest commit.

I4. What do you think HEAD^ means?

HEAD^ is the parent of HEAD.